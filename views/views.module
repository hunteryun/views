<?php

use Zend\Diactoros\Response\JsonResponse;

/**
 * Implements hook_init().
 */
function views_init() {
  global $app;
  $route = '';
  $all_views = views_get_all();
  foreach ($all_views as $view) {
    if(isset($view['view_path']) && $view['view_path']){
      $route = $app->getRoutes()->map(['GET','POST'], $view['view_path'], '\Hunter\views\Controller\ViewsUIController::api_get_view');
    }

    if(is_object($route) && isset($view['view_permissions']) && $view['view_permissions']){
      $app->addRoutePermission($route, $view['view_path'], $view['view_permissions']);
    }
  }
}

/**
 * get view by path
 */
function views_get_view_bypath($path) {
  $all_views = views_get_all();
  foreach ($all_views as $view) {
    if(isset($view['view_path']) && $view['view_path'] == $path){
      return $view;
    }
    if($curpath = preg_replace("/\{.*\}/", "([^/]+)", $view['view_path'])){
      if(preg_match("~^(?|".$curpath.")$~", $path, $matches)){
        return $view;
      }
    }
  }
  return false;
}

/**
 * get all views
 */
function views_get_all() {
  $list = array();
  $query = db_select('variable', 'v');
  $query->fields('v', array('value'));
  $query->condition(
    db_or()
      ->condition('name', 'views.view.%', 'LIKE')
      ->condition('name', 'views_view_final_%', 'LIKE')
  );
  $query->orderBy('name');
  $result = $query->execute()->fetchCol();

  foreach ($result as $item) {
    $list[] = unserialize($item);
  }

  return $list;
}

/**
 * get all templates
 */
function views_get_templates() {
  $list = array();
  $result = db_select('variable', 'v')
  ->fields('v')
  ->condition('name', 'views-view-%', 'LIKE')
  ->orderBy('name')
  ->execute()->fetchAllAssoc('name');

  foreach ($result as $name => $item) {
    $list[$name] = unserialize($item->value);
  }

  return $list;
}

function _views_internal_tables() {
  if (module_exists('category')) {
    $tables['category'] = array(
      'name' => 'category',
      'provider' => 'internal',
      'join' => array(
        'left' => array(
          'table' => 'news',
          'field' => 'nid'
        ),
        'right' => array(
          'field' => 'nid'
        )
      ),
      'fields' => array(
        'cid' => array(
          'name' => 'Cid',
          'help' => 'The category ID.',
          'sortable' => true,
          'filter_type' => 'number',
        ),
        'name' => array(
          'name' => 'Category Name',
          'sortable' => true,
          'filter_type' => 'string',
        ),
      )
    );
  }

  $tables['user'] = array(
    'name' => 'user',
    'provider' => 'internal', // won't show up in external list.
    'join' => array(
      'left' => array(
        'table' => 'news',
        'field' => 'uid'
      ),
      'right' => array(
        'field' => 'uid'
      ),
    ),
    'fields' => array(
      'uid' => array(
        'name' => 'Uid',
        'help' => 'The user ID.',
        'sortable' => true,
        'filter_type' => 'number',
      ),
      'username' => array(
        'name' => 'User Name',
        'sortable' => true,
        'filter_type' => 'string',
      ),
      'email' => array(
        'name' => 'User Email',
        'sortable' => true,
        'filter_type' => 'string',
       ),
      'status' => array(
        'name' => 'User Status',
        'sortable' => true,
        'filter_type' => 'yes-no',
      ),
      'avatar' => array(
        'name' => 'User Avatar',
      ),
      'created' => array(
        'name' => 'User created',
        'sortable' => true,
        'sorttype' => 'date',
        'filter_type' => 'number',
      ),
      'accessed' => array(
        'name' => 'User accessed',
        'sortable' => true,
        'sorttype' => 'date',
        'filter_type' => 'number',
      )
    ),
  );

  $tables['user_roles'] = array(
    'name' => 'user_role',
    'provider' => 'internal', // won't show up in external list.
    'join' => array(
      'left' => array(
        'table' => 'News',
        'field' => 'uid'
      ),
      'right' => array(
        'field' => 'uid'
      ),
    ),
    'fields' => array(
      'name' => array(
        'name' => 'Node Author Name',
        'sortable' => true,
        'uid' => 'uid',
        'filter_type' => 'string',
      ),
    )
  );

  return $tables;
}

function _views_get_tables() {
  global $VIEWS_TABLES, $app;

  if (!$VIEWS_TABLES) {
    $VIEWS_TABLES = array_merge($app->getModuleHandle()->invokeAll('views_tables'), _views_internal_tables());
  }
  return $VIEWS_TABLES;
}

/**
 * Embed a view using a PHP snippet.
 */
function views_get_view($name, $preview = false) {
  if($preview){
    $view = variable_get('views_view_temp_'.$name);
  }else {
    $view = variable_get('views_view_final_'.$name);
  }

  if(isset($view['view_query']) && isset($view['view_template'])){
    if($view['has_pager'] && !empty($view['view_pager'])){
      $page = isset($_GET['page']) ? $_GET['page'] : 1;
      $offset = (int)$view['view_pager']['offset'];
      $number_perpage = 999999;

      if($view['view_pager']['type'] != 'display_all'){
        $offset = ((int)$page-1) * (int)$view['view_pager']['display'] + (int)$view['view_pager']['offset'];
        $pager['page'] = $page;
        $pager['size'] = (int)$view['view_pager']['display'];
        $pager['total'] = COUNT(db_query($view['view_query'], $view['view_query_values'])->fetchAll());
        if($preview){
          $pager['url'] = '/admin/views/add';
        }
        $number_perpage = (int) $view['view_pager']['display'];

        theme()->getEnvironment()->addGlobal('pager', $pager);
      }

      $view['view_query'] = $view['view_query']. ' LIMIT ' . $offset . ', ' . $number_perpage;
    }

    $result = db_query($view['view_query'], $view['view_query_values'])->fetchAll();

    if(!empty($result)) {
      if($view['json_export'] == 'false'){
        $output = theme()->render($view['view_template'], array('viewdata' => $result));
        return $output;
      }else{
        return $result;
      }
    }
  }
  return false;
}
